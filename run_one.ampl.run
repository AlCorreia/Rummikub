reset;

option solver cplexamp;

param compteur; 

model declaration_rummikub.ampl;

param datfile symbolic;
if $datfile != "" then {
    # On recupere le parametre
    let datfile := $datfile;
} else {
    # On n a pas passe de parametre $datfile
    let datfile := "instance_rummikub.ampl.dat";
}
display datfile;
data (datfile);

model build_groups.ampl;
model model.ampl.mod;

# Impression de la configuration initiale
printf "\nCONFIGURATION INITIALE \n";
printf"\nCarte_table:";
for{m in 1..NB_NUM} {
	printf"\n%d: ",m;
	for{n in 1..NB_COUL} {
		printf"%d ", carte_table[m,n];
	}
}
printf"\nCarte_main:";
for{m in 1..NB_NUM} {
	printf"\n%d: ",m;
	for{n in 1..NB_COUL} {
		printf"%d ", carte_main[m,n];
	}
}
# ITERATIONS
	
	solve;
	
	# Impression et mise a jour de carte_table apres solve
	printf "\nCONFIGURATION FINALE \n";
	printf"\nCarte_table:";
	for{m in 1..NB_NUM} {
		printf"\n%d: ",m;
		for{n in 1..NB_COUL} {
			let carte_table[m,n] := carte_table[m,n] + y[m,n];
			let carte_main[m,n] := carte_main[m,n] - y[m,n];
			printf"%d ", carte_table[m,n];
		}
	}
	
	# Impression du groupe de chaque joker
	let compteur := 0;
	for{o in 1..NB_GROUPES}{
		if s[o,0]*x[o] > 0 then {
			let compteur := compteur + 1;
			printf"\nGroupe Joker %d: ", compteur;
			for{m in 1..NB_NUM} {
				for{n in 1..NB_COUL} {
					if s[o,(n-1)*NB_NUM + m] > 0 then {
					printf"(%d, %d) ", m, n;
					}
				}
			}
			printf"\n";
		}
	}
	
	# Impression de carte_main
	printf"\nCarte_main:";
	for{m in 1..NB_NUM} {
		printf"\n%d: ",m;
		for{n in 1..NB_COUL} {
			printf"%d ", carte_main[m,n];
		}
	}


