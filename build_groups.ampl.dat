# Initialisation du tableau s
param s{1..NB_GROUPES, 1..(NB_NUM*NB_COUL + NB_MUL)} default 0, integer, <= NB_MUL ; # Tableau avec les cartes de chaque groupe

#Groupes de 3 cartes consecutives sans joker
let nb_tiles := 3;
repeat {
	let count_colour := 0;
	repeat {
		let j := 1;
		repeat {
			let i := 0;
           	repeat {
				let s[count, j + i + NB_NUM*count_colour] := 1 ;
				let i := i + 1;
			} until i = nb_tiles;
			let count := count + 1;
			let j := j + 1;
		} until j = NB_NUM - nb_tiles + 2;
		let count_colour := count_colour + 1;
	} until count_colour = 4; 
	let nb_tiles := nb_tiles + 1;
} while nb_tiles < 6; 

#Groupes de 3 cartes de couleurs differentes sans joker
let nb_tiles := 3;
let i := 1;
repeat until i = (NB_NUM + 1) {
	let k := 0;
    repeat until k = 4 {
    	let j := 0;
        repeat until j = nb_tiles {
            let num := i + NB_NUM*j + k*NB_NUM;
            if(num > NB_COUL*NB_NUM) then { #attention joker = 53
                let num := num mod (NB_COUL*NB_NUM);
          	}
            let s[count, num] := 1;
            let j := j + 1;
       }
        let count := count + 1;
        let k := k + 1;
    }
    let i := i + 1;
};

#Groupes de 4 cartes de couleurs differentes sans joker
let nb_tiles := 4;
let i := 1;
repeat until i = (NB_NUM + 1){
	let j := 0;
    repeat until j = nb_tiles {
        let s[count, i + NB_NUM*j] := 1;
        let j := j + 1;
    }
    let count := count + 1;
    let i := i + 1;
};

let nb_tiles := 2;
repeat until nb_tiles = 5 {
	let count_colour := 0;
    repeat until count_colour = 4 {
    	let j := 1;	
    	repeat until j = NB_NUM - nb_tiles + 2 {
       		let i := 0;
            repeat until i = nb_tiles {
                let s[count, j + i + NB_NUM*count_colour] := 1;
                let i := i + 1;
            };
            let s[count, NB_NUM*NB_COUL+1] := 1;
            let count := count + 1;
            let j := j + 1;
        };
        let count_colour := count_colour + 1;
    };
    let nb_tiles := nb_tiles + 1;
};

let nb_tiles := 2;
repeat until nb_tiles = 5 {
	let count_colour := 0;
    repeat until count_colour = 4 {
    	let j := 1;	
    	repeat until j = NB_NUM - nb_tiles + 1 {
            let i := 0;
            repeat until i = (nb_tiles - 1) {
            	let k := 0;
            	repeat until k = (i + 1) {
                    let s[count, j + NB_NUM*count_colour + k] := 1;
                    let k := k + 1;
                }; #Boucle k
                repeat until l = (nb_tiles - 1 - i) {
                    let s[count, j + NB_NUM*count_colour + 2 + l + i] := 1;
                    let l := l + 1;
                }; #Boucle l
                let s[count, NB_NUM*NB_COUL + 1] := 1;
                let count := count + 1;
                let i := i + 1;
           }; #Boucle i
           let j := j + 1;
        }; #Boucle j
        let count_colour := count_colour + 1;
    }; #Boucle count_colour
    let nb_tiles := nb_tiles + 1;
}; #Boucle nb_tiles

let nb_tiles := 2;
repeat until nb_tiles = 4 {
	let i := 1;
	repeat until i = NB_NUM + 1 {
		let k := 0;
        repeat until k = 4 {
        	let l := 3;
        	repeat until l = (nb_tiles - 1) {
        		let j := 0;
                repeat until j = nb_tiles {
                    let num := i + NB_NUM*j + k*NB_NUM;
                    if num > NB_COUL*NB_NUM then 
                        let num := num mod (NB_COUL*NB_NUM);
                    let s[count, num] := 1;
                    let j := j + 1;
                }; #Boucle j
                let l2 := l;
                repeat until l2 = 4 {
                	let s[count, NB_NUM*NB_COUL+4-l2] := 1;
                	let l2 := l2 + 1;
                }; #Boucle l2
                let count := count + 1;
            	let l := l - 1;
            }; #Boucle l
        	let k := k + 1;
        }; #Boucle k
    	let i := i + 1;
    }; #Boucle i
    let nb_tiles := nb_tiles + 1;
}; #Boucle nb_tiles

let nb_tiles := 2;
let c = 0;
repeat until c = 2 {
	let i := 1; 
	repeat until i = NB_NUM + 1 {
		let k := 0; 
        repeat until k = 2 {
        	let j := 0;
        	repeat until j = nb_tiles {
                let num := i + NB_NUM*j*2 + k*NB_NUM;
                if num > NB_COUL*NB_NUM then
                    let num := num mod (NB_COUL*NB_NUM);
                let s[count, num] := 1;
            }; #Boucle j
            let l := 0;
            repeat until l = c + 1 {
            	let s[count, NB_NUM*NB_COUL+1+l] := 1;
            }
            let count := count + 1;
            let k := k + 1;
        }; #Boucle k
        let i := i + 1; 
    }; #Boucle i
    let c := c + 1;
}; #Boucle c

let nb_tiles := 1;
repeat until nb_tiles = 4 {
	let count_colour := 0;
	repeat until count_colour = 4 {
		let j := 1;
		repeat until j = (NB_NUM - nb_tiles + 2) {
			let i := 0; 
            repeat until i = nb_tiles {
                s[count, j + i + NB_NUM*count_colour] = 1;
                let i := i + 1;
           	}; #Boucle i
            let s[count, NB_NUM*NB_COUL+1] := 1;
            let s[count, NB_NUM*NB_COUL+2] := 1;
            let count := count + 1;
            let j := j + 1;
        }; #Boucle j
        let count_colour := count_colour + 1;
    }; #Boucle count_colour
    let nb_tiles := nb_tiles + 1;
}; #Boucle nb_tiles

let nb_tiles := 2;
repeat until nb_tiles = 4 {
	let count_colour := 0;
	repeat until count_colour = 4 {
		let j := 1;
		repeat until j = (NB_NUM - nb_tiles + 1) {
			let i := 0;
			repeat until i = nb_tiles - 1 {
				let k := 2;
				repeat until k = 4 {
                for dd = 2:3
                    if j mod (NB_NUM - nb_tiles) != 0 || k != 3) {
                    	let l := 0;
                    	repeat until l : i + 1 {
                            let s[count, j + NB_NUM*count_colour + l] := 1;
                        }; # Boucle l
 						let l2 := 0;                    
                        repeat l2 until (nb_tiles - 1 - i) {
                            S(count, j + NB_NUM*count_colour + dd + k + i) = 1;
                        }; # Boucle l2
                        let s[count, NB_NUM*NB_COUL+1] := 1;
                        let s[count, NB_NUM*NB_COUL+2] := 1;
                        count = count + 1;
                    }; # if
                    let k := k + 1;
                }; 
                let i := i + 1;
            }; #Boucle i
            let j := j + 1;
        }; #Boucle j
        let count_colour := count_colour + 1;
    }; #Boucle count_colour
    let nb_tiles := nb_tiles + 1;
}; #Boucle nb_tiles

let nb_tiles := 3;
let count_colour = 0;
repeat count_colour = 4 {
	let j := 1;
	repeat until j = NB_NUM - nb_tiles {
        let s[count, j + NB_NUM*count_colour] := 1;
        let s[count, j + NB_NUM*count_colour + 2] := 1;
        let s[count, j + NB_NUM*count_colour + 4] := 1;
        let s[count, NB_NUM*NB_COUL+1] := 1;
        let s[count, NB_NUM*NB_COUL+2] := 1;
        let count := count + 1;
    }; # Boucle j
}; # Boucle count_colour